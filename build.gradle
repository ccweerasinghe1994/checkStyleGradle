plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.4'
    id 'io.spring.dependency-management' version '1.1.5'
    id 'checkstyle'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

//checkstyle {
//    toolVersion = "10.12.4" // Specify the Checkstyle version
//    configDirectory = file("config/checkstyle") // Directory where the Checkstyle configuration file is located
//    configFile = file("config/checkstyle/checkstyle.xml") // Path to the Checkstyle configuration file
//    ignoreFailures = false // Set to true if you want the build to continue even if there are Checkstyle violations
//    showViolations = true // Set to true if you want to show Checkstyle violations in the console output
//}

/**
 * Task: copyPreCommitHook
 *
 * This task automates the copying of a pre-commit hook script from a specified source directory
 * to the `.git/hooks` directory within the project. It ensures that the pre-commit hook is properly
 * placed and made executable, facilitating automated code quality checks or other pre-commit actions
 * defined in the hook script.
 *
 * The task is of type `Copy`, indicating it performs a file copy operation. The source of the copy
 * operation is defined by the `from` property, and the destination is defined by the `into` property.
 *
 * Properties:
 * - `from`: Specifies the relative path to the source `pre-commit` script within the project structure.
 *           In this case, it's located at 'config/checkstyle/pre-commit'.
 * - `into`: Specifies the destination directory for the copy operation, which is '.git/hooks', the
 *           standard directory where Git looks for hook scripts.
 * - `fileMode`: Sets the file mode of the copied script to `0755`, making the script executable.
 *
 * Behavior:
 * Before the main copy operation, a `doFirst` action checks if the `pre-commit` file already exists
 * in the destination directory. If the file exists, the task logs a message indicating the hook
 * already exists and skips the main copy operation by throwing a `StopExecutionException`. This
 * ensures the task only copies the hook if it doesn't already exist, preventing unnecessary overwrites.
 *
 * Usage:
 * This task is intended to be run as part of the project setup or build process to ensure the
 * pre-commit hook is in place before any commits are made. It can be manually executed via the
 * command line with `./gradlew copyPreCommitHook` or automatically executed before tasks that
 * depend on it, such as `compileJava`.
 */
tasks.register('copyPreCommitHook', Copy) {
    // Define the source and destination of the copy operation
    from 'config/checkstyle/pre-commit'
    into '.git/hooks'

    // Ensure the file is executable after being copied
    fileMode = 0755

    // Add a condition to only execute the copy if the pre-commit hook does not already exist
    doFirst {
        if (file('.git/hooks/pre-commit').exists()) {
            logger.lifecycle("Pre-commit hook already exists. Skipping copy.")
            // Skip the task execution
            throw new StopExecutionException("Pre-commit hook already exists.")
        }
    }
}

if (!System.getenv('JENKINS_URL')) {
    tasks.named('compileJava') {
        dependsOn 'copyPreCommitHook'
    }
}
tasks.named('test') {
    useJUnitPlatform()
}
