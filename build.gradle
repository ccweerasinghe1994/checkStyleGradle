plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.1'
    id 'io.spring.dependency-management' version '1.1.5'
    id 'checkstyle'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

//checkstyle {
//    toolVersion = "10.12.4" // Specify the Checkstyle version
//    configDirectory = file("config/checkstyle") // Directory where the Checkstyle configuration file is located
//    configFile = file("config/checkstyle/checkstyle.xml") // Path to the Checkstyle configuration file
//    ignoreFailures = false // Set to true if you want the build to continue even if there are Checkstyle violations
//    showViolations = true // Set to true if you want to show Checkstyle violations in the console output
//}

/**
 * Registers a custom Gradle task named `copyPreCommitHook` of type `Copy`.
 * This task is designed to automate the process of copying a specific `pre-commit` hook script
 * from a designated configuration directory to the `.git/hooks` directory within the project.
 * This ensures that the `pre-commit` hook is properly placed and made executable before the application starts,
 * facilitating automated code quality checks or other pre-commit actions defined in the hook script.
 *
 * The task specifies the source file location (`from`) as 'config/checkstyle/pre-commit',
 * indicating the relative path to the `pre-commit` script within the project structure.
 * The destination (`into`) is set to '.git/hooks', the standard directory where Git looks for hook scripts.
 *
 * Additionally, the task sets the file mode (`fileMode`) of the copied script to `0755`.
 * This file mode setting makes the script executable, allowing it to be run by Git as a hook.
 */
tasks.register('copyPreCommitHook', Copy) {
    // Define the source and destination of the copy operation
    from 'config/checkstyle/pre-commit'
    into '.git/hooks'

    // Ensure the file is executable after being copied
    fileMode = 0755
}

tasks.named('bootRun') {
    // Make sure the copyPreCommitHook task runs before the application starts
    dependsOn copyPreCommitHook
}
tasks.named('test') {
    useJUnitPlatform()
}
